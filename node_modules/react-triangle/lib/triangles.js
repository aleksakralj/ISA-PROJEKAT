'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RightTriangle = exports.LeftTriangle = exports.DownTriangle = exports.UpTriangle = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _support = require('./support.jsx');

var _support2 = _interopRequireDefault(_support);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UpTriangle = exports.UpTriangle = function (_TriangleSupport) {
  (0, _inherits3.default)(UpTriangle, _TriangleSupport);

  function UpTriangle() {
    (0, _classCallCheck3.default)(this, UpTriangle);
    return (0, _possibleConstructorReturn3.default)(this, (UpTriangle.__proto__ || (0, _getPrototypeOf2.default)(UpTriangle)).apply(this, arguments));
  }

  (0, _createClass3.default)(UpTriangle, [{
    key: '_calcVertexCoord',
    value: function _calcVertexCoord() {
      var x = this.props.x;
      var y = this.props.y;
      var s = this.props.size;
      var h = Math.sqrt(3) * s / 2;
      return [[x - s / 2, y + h / 2], [x, y - h / 2], [x + s / 2, y + h / 2]];
    }
  }]);
  return UpTriangle;
}(_support2.default); // eslint-disable-line no-unused-vars


var DownTriangle = exports.DownTriangle = function (_TriangleSupport2) {
  (0, _inherits3.default)(DownTriangle, _TriangleSupport2);

  function DownTriangle() {
    (0, _classCallCheck3.default)(this, DownTriangle);
    return (0, _possibleConstructorReturn3.default)(this, (DownTriangle.__proto__ || (0, _getPrototypeOf2.default)(DownTriangle)).apply(this, arguments));
  }

  (0, _createClass3.default)(DownTriangle, [{
    key: '_calcVertexCoord',
    value: function _calcVertexCoord() {
      var x = this.props.x;
      var y = this.props.y;
      var s = this.props.size;
      var h = Math.sqrt(3) * s / 2;
      return [[x - s / 2, y - h / 2], [x, y + h / 2], [x + s / 2, y - h / 2]];
    }
  }]);
  return DownTriangle;
}(_support2.default);

var LeftTriangle = exports.LeftTriangle = function (_TriangleSupport3) {
  (0, _inherits3.default)(LeftTriangle, _TriangleSupport3);

  function LeftTriangle() {
    (0, _classCallCheck3.default)(this, LeftTriangle);
    return (0, _possibleConstructorReturn3.default)(this, (LeftTriangle.__proto__ || (0, _getPrototypeOf2.default)(LeftTriangle)).apply(this, arguments));
  }

  (0, _createClass3.default)(LeftTriangle, [{
    key: '_calcVertexCoord',
    value: function _calcVertexCoord() {
      var x = this.props.x;
      var y = this.props.y;
      var s = this.props.size;
      var w = Math.sqrt(3) * s / 2;
      return [[x + w / 2, y + s / 2], [x - w / 2, y], [x + w / 2, y - s / 2]];
    }
  }]);
  return LeftTriangle;
}(_support2.default);

var RightTriangle = exports.RightTriangle = function (_TriangleSupport4) {
  (0, _inherits3.default)(RightTriangle, _TriangleSupport4);

  function RightTriangle() {
    (0, _classCallCheck3.default)(this, RightTriangle);
    return (0, _possibleConstructorReturn3.default)(this, (RightTriangle.__proto__ || (0, _getPrototypeOf2.default)(RightTriangle)).apply(this, arguments));
  }

  (0, _createClass3.default)(RightTriangle, [{
    key: '_calcVertexCoord',
    value: function _calcVertexCoord() {
      var x = this.props.x;
      var y = this.props.y;
      var s = this.props.size;
      var w = Math.sqrt(3) * s / 2;
      return [[x - w / 2, y + s / 2], [x + w / 2, y], [x - w / 2, y - s / 2]];
    }
  }]);
  return RightTriangle;
}(_support2.default);